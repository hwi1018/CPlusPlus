1. C++에서 포인터를 사용할 수 있게 만든 이유
 -> 컴퓨터의 주소지정 메커니즘에 직접 대응할 수 있도록

2. 문자열 리터럴
  -> const char* str= "Hello world";
  -> 과거의 C/C++에서 char*로 문자열 리터럴을 정의해놓아서 사용할 수 있는거다.
  -> "Hello world"는 RAM의 텍스트 영역에 따로 저장된다. 그래서 각각의 단어는 바꿀 수 없다.
  -> 그래서 변경할 수 없도록 const를 붙힌 것이다. const char* str은 str이 가르키고 있는 값을 변경할 수 없는 것이다.
  -> L"Hello"의 형태는 와이드 문자열, const wchar_t[] 타입이다

3. 포인터와 배열
  -> 배열의 이름이 첫번째 원소의 포인터이다.
  -> 포인터가 가르키는 위치는 배열의 끝 바로 다음 위치까지 문제가 없도록 설계되었다.(중요)
  -> 하지만 배열의 끝 다음 위치의 값은 읽거나 변경할 수 없다!!!.
  -> 배열은 주소가 증가할 때 선언된 자료형을 기준으로 늘어남
  -> ex) int v[10] :: &v[0], &v[1] aef0, aef4

4. 상수
  -> const로 선언된 것은 선언문이 속한 유효범위 내에서는 절대로 값이 바뀔 수 없다
  -> 나열자(enum)으로 숫자를 사용하는게 좋다.

5. 참조자(중요)
  -> 참조자의 값은 일단 초기화된 후엔 변경시킬 수 없다(ex int& r = i; r++;) r++이지만 i값이 증가
  -> 처음에 자신이 참조한 값을 끝까지 참조
  -> 

6. extern
  -> extern으로 선언되면 컴파일러는 해당 변수가 외부에서 선언되었다고 인식한다.

TIP
* 허용된 것 이외의 포인터 연산은 금물
* 배열의 경계를 넘어선 데이터 기록은 하지마라
* NULL 보다는 0
* 기본방식 배열보다 vector를 사용할 것 (#include<vector>)
* 문자열은 string을 사용 (#include<string>)
* 참조자를 사용할 때는 값이 변경되지 않게 const를 사용하는 것이 좋음
* 하부 수준의 코드 이외에는 void* 사용을 피하자
* 하드코딩보다 enum을 사용하여 연속된 수를 표현하는 것이 좋음